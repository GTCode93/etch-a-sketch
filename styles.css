.gridContainer {
    border: 5px solid black;
    display: flex;
    flex-direction: column;
    align-content: flex-start;
    height: 650px;
    width: 650px;
}

.gridRows {
    display: flex;
    flex: 1;
}

.gridItems {
    border: 1px solid black;
    flex: 1;
}

.gridItemHovered {
    background-color: black;
}

.gridButton {
    font-size: 30px;
    margin-bottom: 20px;
    padding: 5px;
}

/* 
How I solved the Scaling Issue:

My next thought is I can create a new element that will be inside the grid container that mirrors the exact same amount of rows or columns.
It'll be like this:

gridContainer > gridRows/Columns > gridItems

This is so I can use purely DOM methods to determine how many columns there will be, and THEN to those gridRows/Columns I'll add the appropriate amount of gridItems that the user inputs. This is a lot more possible in my eyes since it works purely off JavaScript while CSS just needs the items to fill out a row like normal! 
*/